{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNy2Tmo8WH/bPxOjEa2cV5F",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Malavika-2001-gif/colab-notebook/blob/main/Assignment%20model%20selection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "file_path = '/content/titanic_dataset .csv'\n",
        "titanic_data = pd.read_csv(file_path)\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "print(titanic_data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1ZfSEBBiK2l",
        "outputId": "9de3d864-476d-4634-8498-e232f2a3a2fc"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   PassengerId  Survived  Pclass  \\\n",
            "0            1         0       3   \n",
            "1            2         1       1   \n",
            "2            3         1       3   \n",
            "3            4         1       1   \n",
            "4            5         0       3   \n",
            "\n",
            "                                                Name     Sex   Age  SibSp  \\\n",
            "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
            "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
            "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
            "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
            "4                           Allen, Mr. William Henry    male  35.0      0   \n",
            "\n",
            "   Parch            Ticket     Fare Cabin Embarked  \n",
            "0      0         A/5 21171   7.2500   NaN        S  \n",
            "1      0          PC 17599  71.2833   C85        C  \n",
            "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
            "3      0            113803  53.1000  C123        S  \n",
            "4      0            373450   8.0500   NaN        S  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Check for missing values\n",
        "print(titanic_data.isnull().sum())\n",
        "\n",
        "# Fill missing values\n",
        "titanic_data['Age'].fillna(titanic_data['Age'].median(), inplace=True)\n",
        "titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)\n",
        "titanic_data.drop(columns='Cabin', inplace=True)  # Dropping the Cabin column due to too many missing values\n",
        "\n",
        "# Encode categorical variables\n",
        "le = LabelEncoder()\n",
        "titanic_data['Sex'] = le.fit_transform(titanic_data['Sex'])\n",
        "titanic_data['Embarked'] = le.fit_transform(titanic_data['Embarked'])\n",
        "\n",
        "# Define features and target variable\n",
        "X = titanic_data.drop(columns=['Survived', 'Name', 'Ticket', 'PassengerId'])\n",
        "y = titanic_data['Survived']\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aNyDRLY-iX6F",
        "outputId": "4170d6e2-6e4c-44ba-a4d3-c4bc69932ef0"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PassengerId      0\n",
            "Survived         0\n",
            "Pclass           0\n",
            "Name             0\n",
            "Sex              0\n",
            "Age            177\n",
            "SibSp            0\n",
            "Parch            0\n",
            "Ticket           0\n",
            "Fare             0\n",
            "Cabin          687\n",
            "Embarked         2\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# kNN model\n",
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "knn.fit(X_train, y_train)\n",
        "knn_pred = knn.predict(X_test)\n",
        "knn_accuracy = accuracy_score(y_test, knn_pred)\n",
        "print(f'kNN Accuracy: {knn_accuracy}')\n",
        "\n",
        "# SVM model\n",
        "svm = SVC(kernel='linear')\n",
        "svm.fit(X_train, y_train)\n",
        "svm_pred = svm.predict(X_test)\n",
        "svm_accuracy = accuracy_score(y_test, svm_pred)\n",
        "print(f'SVM Accuracy: {svm_accuracy}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fHbYYdfQieME",
        "outputId": "11bdcfda-c128-4ecc-b6a6-02bcfc2f6876"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "kNN Accuracy: 0.7039106145251397\n",
            "SVM Accuracy: 0.7821229050279329\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score, StratifiedKFold\n",
        "\n",
        "# k-fold cross-validation\n",
        "kfold_scores_knn = cross_val_score(knn, X, y, cv=10)\n",
        "kfold_scores_svm = cross_val_score(svm, X, y, cv=10)\n",
        "\n",
        "print(f'kNN k-fold Average Accuracy: {kfold_scores_knn.mean()}')\n",
        "print(f'SVM k-fold Average Accuracy: {kfold_scores_svm.mean()}')\n",
        "\n",
        "# Stratified k-fold cross-validation\n",
        "skf = StratifiedKFold(n_splits=10)\n",
        "stratified_scores_knn = cross_val_score(knn, X, y, cv=skf)\n",
        "stratified_scores_svm = cross_val_score(svm, X, y, cv=skf)\n",
        "\n",
        "print(f'kNN Stratified k-fold Average Accuracy: {stratified_scores_knn.mean()}')\n",
        "print(f'SVM Stratified k-fold Average Accuracy: {stratified_scores_svm.mean()}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YKRTS-Z_i24o",
        "outputId": "82934bae-bf02-4f0e-98df-2898c767e148"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "kNN k-fold Average Accuracy: 0.7082771535580524\n",
            "SVM k-fold Average Accuracy: 0.786729088639201\n",
            "kNN Stratified k-fold Average Accuracy: 0.7082771535580524\n",
            "SVM Stratified k-fold Average Accuracy: 0.786729088639201\n"
          ]
        }
      ]
    }
  ]
}